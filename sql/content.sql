INSERT INTO `content` VALUES (1, '线段是最基本的几何元素，所以需要处理得很好才行', 1, 1, 2);
INSERT INTO `content` VALUES (2, '常规的画线方法会出现累积舍入误差', 1, 1, 3);
INSERT INTO `content` VALUES (3, '而且涉及到浮点数运算，速度较慢', 1, 1, 4);
INSERT INTO `content` VALUES (4, '采用Bresenham画线算法可以仅涉及整数运算，避免舍入误差，提高运算速度。而且由于可以增量式的计算，算法效率进一步提高。', 1, 1, 5);
INSERT INTO `content` VALUES (5, '对多边形进行扫描转换时，首先要明白的一点是如何判断一个点在多边形的内部还是外部。', 1, 1, NULL);
INSERT INTO `content` VALUES (28, '多边形扫描转换存在着一些特殊情况，接下来我为大家一一讲解', 1, 1, NULL);
INSERT INTO `content` VALUES (29, '软件测试定义是：为了发现程序中的错误而执行程序的过程', 1, 27, NULL);
INSERT INTO `content` VALUES (30, '它是帮助识别开发完成（中间或最终的版本）的计算机软件（整体或部分）的正确度 、完全度和质量的软件过程；是SQA的重要子域。', 1, 27, NULL);
INSERT INTO `content` VALUES (31, '软件测试的目标：', 1, 27, NULL);
INSERT INTO `content` VALUES (32, '(1)测试是为了发现程序中的错误而执行程序的过程；', 1, 27, NULL);
INSERT INTO `content` VALUES (33, '(2)好的测试方案是极可能发现迄今为止尚未发现的错误的测试方案；', 1, 27, NULL);
INSERT INTO `content` VALUES (34, '(3)成功的测试是发现了至今为止尚未发现的错误的测试。', 1, 27, NULL);
INSERT INTO `content` VALUES (35, '软件测试的内容：', 1, 27, NULL);
INSERT INTO `content` VALUES (37, '软件测试主要工作内容是验证和确认，下面分别给出其概念：', 1, 27, NULL);
INSERT INTO `content` VALUES (38, '验证是保证软件正确地实现了一些特定功能的一系列活动，即保证软件做了你所期望的事情。', 1, 27, NULL);
INSERT INTO `content` VALUES (39, '1.确定软件生存周期中的一个给定阶段的产品是否达到前阶段确立的需求的过程；', 1, 27, NULL);
INSERT INTO `content` VALUES (40, '2.程序正确性的形式证明，即采用形式理论证明程序符号设一计规约规定的过程；', 1, 27, NULL);
INSERT INTO `content` VALUES (42, '3.评审、审查、测试、检查、审计等各类活动，或对某些项处理、服务或文件等是否和规定的需求相一致进行判断和提出报告。', 1, 27, NULL);
INSERT INTO `content` VALUES (43, '确认是一系列的活动和过程，目的是想证实在一个给定的外部环境中软件的逻辑正确性。即保证软件以正确的方式来做了这个事件', 1, 27, NULL);
INSERT INTO `content` VALUES (44, '1.静态确认，不在计算机上实际执行程序，通过人工或程序分析来证明软件的正确性；', 1, 27, NULL);
INSERT INTO `content` VALUES (45, '2.动态确认，通过执行程序做分析，测试程序的动态行为，以证实软件是否存在问题。', 1, 27, NULL);
INSERT INTO `content` VALUES (46, '软件测试的对象不仅仅是程序测试，软件测试应该包括整个软件开发期间各个阶段所产生的文档', 1, 27, NULL);
INSERT INTO `content` VALUES (47, '需求工程是指应用已证实有效的原理、方法，通过合适的工具和记号，系统地描述待开发系统及其行为特征和相关约束。', 1, 28, NULL);
INSERT INTO `content` VALUES (48, '需求工程覆盖了体系结构设计之前的各项开发活动，主要包括分析客户要求、对未来系统的各项功能性及非功能性需求进行规格说明', 1, 28, NULL);
INSERT INTO `content` VALUES (49, '针对不同的对象可分为系统需求工程（如果是针对由软硬件共同组成的整个系统）和软件需求工程（如果仅是专门针对纯软件部分）。', 1, 28, NULL);
INSERT INTO `content` VALUES (50, '在系统开发中，需求工程往往与体系结构设计交替进行，直到分解的子问题可以单纯地由软件或硬件系统解决。', 1, 28, NULL);
INSERT INTO `content` VALUES (51, '软件需求工程则是对应用于纯软件系统开发生命期中系统设计之前的第一阶段。因此，需求工程的目标相当简单明了：确定客户需求，定义设想中系统的所有外部特征。', 1, 28, NULL);
INSERT INTO `content` VALUES (52, '需求工程的主要方法有结构化需求抽取方法、系统化的需求建模方法、形式化的需求验证技术。', 1, 28, NULL);
INSERT INTO `content` VALUES (53, '可以把需求工程的活动划分为以下5个独立的阶段：', 1, 28, NULL);
INSERT INTO `content` VALUES (54, '需求获取：通过与用户的交流，对现有系统的观察及对任务进行分析，从而开发、捕获和修订用户的需求；', 1, 28, NULL);
INSERT INTO `content` VALUES (55, '需求建模：为最终用户所看到的系统建立一个概念模型，作为对需求的抽象描述，并尽可能多的捕获现实世界的语义；', 1, 28, NULL);
INSERT INTO `content` VALUES (56, '形成需求规格：生成需求模型构件的精确的形式化的描述，作为用户和开发者之间的一个协约；', 1, 28, NULL);
INSERT INTO `content` VALUES (57, '需求验证：以需求规格说明为输入，通过符号执行、模拟或快速原型等途径，分析需求规格的正确性和可行性，包含有效性检查，一致性检查，可行性检查和确认可验证性；', 1, 28, NULL);
INSERT INTO `content` VALUES (58, '需求管理：支持系统的需求演进，如需求变化和可跟踪性问题。', 1, 28, NULL);
INSERT INTO `content` VALUES (59, '测试建模的基本点', 1, 29, NULL);
INSERT INTO `content` VALUES (60, '合理的测试模型可以准确地描述产品，使测试更有针对性，且避免了测试遗漏和浪费。', 1, 29, NULL);
INSERT INTO `content` VALUES (61, '多角度考察产品，重要的切入点包括业务领域、软件实现和项目环境。', 1, 29, NULL);
INSERT INTO `content` VALUES (62, '业务领域：恰当的模型应该切合产品的业务领域；', 1, 29, NULL);
INSERT INTO `content` VALUES (63, '软件实现：好的测试模型具有很强的针对性，能够清晰地描绘被测产品的特征；', 1, 29, NULL);
INSERT INTO `content` VALUES (64, '项目环境：好的测试模型不一定复杂，但一定实用，能够切合当前项目环境，充分利用资源。', 1, 29, NULL);
INSERT INTO `content` VALUES (65, '一方面，测试建模是一个持续的过程；另一方面，测试模型应该在测试小组中分享。 模型的表达方式分为形式化模型和非形式化模型两种。', 1, 29, NULL);
INSERT INTO `content` VALUES (66, '形式化模型可以被工具软件读取；非形式化模型包括自然语言表达的文字、列表、草图等。模型的价值取决于发现缺陷的效率。', 1, 29, NULL);
INSERT INTO `content` VALUES (67, '可行的策略是构建一个简单的模型，用它指导测试设计，并根据测试反馈来改进它。在测试迭代中，模型会逐步成长，日趋成熟。', 1, 29, NULL);
INSERT INTO `content` VALUES (68, '不论测试人员是否有意识的建模，任务测试都基于模型，然而，认真去构建好的模型将提高测试过程的质量。', 1, 29, NULL);
INSERT INTO `content` VALUES (69, '测试建模的基本任务是建立被测对象的模型，以帮助理解软件和设计测试。', 1, 29, NULL);
INSERT INTO `content` VALUES (70, '纯粹的通用模型远离业务领域和设计实现，需要做因地制宜的改良，才能发挥作用。改良的基本方法是使用业务需求、产品元素、项目环境的信息去丰富和调整模型。', 1, 29, NULL);
INSERT INTO `content` VALUES (71, '构建模型需要简化和聚焦，使用模型需要扩展和发散。', 1, 29, NULL);
INSERT INTO `content` VALUES (72, '好的测试模型必须经过测试迭代的淬炼。', 1, 29, NULL);
INSERT INTO `content` VALUES (73, '本质上，所有的模型都是错的，但是有些是有用的。', 1, 29, NULL);
INSERT INTO `content` VALUES (74, '不要追求完美的模型，要创建注重实效的模型。模型是测试设计的工具，好的模型将有力支持测试设计。', 1, 29, NULL);
INSERT INTO `content` VALUES (75, '不要依赖单一的模型，要综合多个模型，以避免认知偏差，不要完全信赖任何模型，要通过测试去质疑并改进模型。', 1, 29, NULL);
INSERT INTO `content` VALUES (76, '启发式测试策略模型是一个指导测试设计和风险分析的概念框架，测试人员需要根据项目语境对其进行裁剪和丰富。', 1, 29, NULL);
INSERT INTO `content` VALUES (77, '在测试中，功能列表、输入与输出模型、系统生态图、实体关系模型、状态机模型、质量特性列表等是常见的测试模型。', 1, 29, NULL);
INSERT INTO `content` VALUES (78, '测试人员可以针对特定领域或测试对象开发出多种多样的模型。', 1, 29, NULL);
INSERT INTO `content` VALUES (79, '条件分析是一种启发测思路的常见方法。', 1, 29, NULL);
INSERT INTO `content` VALUES (80, '测试需求分析阶段：阅读需求，理解需求，主要就是对业务的学习，分析需求点，参与需求评审会议', 1, 30, NULL);
INSERT INTO `content` VALUES (81, '测试计划阶段：主要任务就是编写测试计划，参考软件需求规格说明书，项目总体计划，内容包括测试范围，进度安排，人力物力的分配，整体测试策略的制定。', 1, 30, NULL);
INSERT INTO `content` VALUES (82, '测试设计阶段：主要是编写测试用例，会参考需求文档（原型图），概要设计，详细设计等文档，用例编写完成之后会进行评审。', 1, 30, NULL);
INSERT INTO `content` VALUES (83, '测试执行阶段：搭建环境，执行冒烟测试（预测试）-然后进入正式测试，bug管理直到测试结束', 1, 30, NULL);
INSERT INTO `content` VALUES (84, '测试评估阶段：出测试报告，确认是否可以上线', 1, 30, NULL);
INSERT INTO `content` VALUES (85, '测试计划与估算', 1, 31, NULL);
INSERT INTO `content` VALUES (86, '对整个系统或部分系统可能的测试计划活动包括：', 1, 31, NULL);
INSERT INTO `content` VALUES (87, '确定测试的范围和风险，明确测试的目标；', 1, 31, NULL);
INSERT INTO `content` VALUES (88, '定义测试的整体方法（测试策略），包括测试级别（按测试阶段或层次）的定义、入口和出口准则的定义；', 1, 31, NULL);
INSERT INTO `content` VALUES (89, '把测试活动整合和协调到整个软件生命周期活动中去（采购、供应、开发和运维）；', 1, 31, NULL);
INSERT INTO `content` VALUES (90, '决定测试什么？测试由什么角色来执行？如何进行测试？如何评估测试结果？', 1, 31, NULL);
INSERT INTO `content` VALUES (91, '为测试分析和设计活动安排时间进度；', 1, 31, NULL);
INSERT INTO `content` VALUES (92, '为测试实现、执行和评估安排时间进度；', 1, 31, NULL);
INSERT INTO `content` VALUES (93, '为已定义的不同测试活动分配资源；', 1, 31, NULL);
INSERT INTO `content` VALUES (94, '定义测试文档的数量、详细程度、结构和模板；', 1, 31, NULL);
INSERT INTO `content` VALUES (95, '为监控测试准备和执行、缺陷解决和风险问题选择度量项；', 1, 31, NULL);
INSERT INTO `content` VALUES (96, '确定测试规程的详细程度，以提供足够的信息支持可复用的测试准备和执行。', 1, 31, NULL);
INSERT INTO `content` VALUES (97, '估算测试工作量的方法：', 1, 31, NULL);
INSERT INTO `content` VALUES (98, '基于度量的方法：根据以前或相似项目的度量值来进行测试工作量的估算，或者根据典型的数据来进行估算；', 1, 31, NULL);
INSERT INTO `content` VALUES (99, '基于专家的方法：由任务的责任人或专家来进行测试任务工作量的估算。', 1, 31, NULL);
INSERT INTO `content` VALUES (100, '一旦估算了测试工作量，就可以识别资源和制定时间进度表。 测试的工作量可能取决于多种因素，包括：', 1, 31, NULL);
INSERT INTO `content` VALUES (101, '产品的特点：规格说明和用于测试模型的其它信息（即测试依据）的质量，产品的规模，问题域的复杂度，可靠性、安全性的需求和文档的需求；', 1, 31, NULL);
INSERT INTO `content` VALUES (102, '开发过程的特点：组织的稳定性、使用的工具、测试过程、参与者的技能水平和时间紧迫程度等；', 1, 31, NULL);
INSERT INTO `content` VALUES (103, '测试的输出：缺陷的数量和需要返工的工作量。', 1, 31, NULL);
INSERT INTO `content` VALUES (104, '黑盒测试用例设计方法,主要包括等价类划分法、边界值分析法、错误推测法、因果图法、判定表驱动发、正交试验设计法、功能图法等', 1, 32, NULL);
INSERT INTO `content` VALUES (105, '1.等价类划分法', 1, 32, NULL);
INSERT INTO `content` VALUES (106, '等价类划分法是把程序的输入域分成若干部分，然后从每个部分中选取少数代表性数据作为测试用例。每一类的代表性数据在测试中的作用等价于这一类中的其他值。', 1, 32, NULL);
INSERT INTO `content` VALUES (107, '2.边界值分析法', 1, 32, NULL);
INSERT INTO `content` VALUES (108, '边界值分析法就是对输入火输出的边界值进行测试的一种黑盒测试方法.同城边界值分析法是作为对等价类划分法的补充.', 1, 32, NULL);
INSERT INTO `content` VALUES (109, '使用边界值分析方法设计测试用例,首先应确定边界情况.通常输入和输出等价类的边界,就是应着重测试的边界情况.', 1, 32, NULL);
INSERT INTO `content` VALUES (110, '应当选取正好等于,刚刚大于或者刚刚小于边界的值作为测试数据.', 1, 32, NULL);
INSERT INTO `content` VALUES (111, '3.错误推断法', 1, 32, NULL);
INSERT INTO `content` VALUES (112, '基于经验和直觉推测程序中所有可能存在的各种错误,从而有针对性的设计测试用例的方法.', 1, 32, NULL);
INSERT INTO `content` VALUES (113, '4.因果图法', 1, 32, NULL);
INSERT INTO `content` VALUES (114, '因果图法是一种利用图解法分析输入的各种组合情况,从而设计测试用例的方法.', 1, 32, NULL);
INSERT INTO `content` VALUES (115, '5.正交试验法', 1, 32, NULL);
INSERT INTO `content` VALUES (116, '依据Galois理论,从大量的(实验)数据(测试例)中挑选适量的,有代表性的点(例),从而合理地安排实验(测试)的一种科学实验设计方法.', 1, 32, NULL);
INSERT INTO `content` VALUES (117, '6.功能图法', 1, 32, NULL);
INSERT INTO `content` VALUES (118, '功能图由状态迁移图和布尔函数组成.状态迁移图用状态和迁移来描述.一个状态指出数据输入的位置(或时间),而迁移则指明状态的改变.', 1, 32, NULL);
INSERT INTO `content` VALUES (119, '7.场景法', 1, 32, NULL);
INSERT INTO `content` VALUES (120, '事件触发时的情景便形成了场景,二同一事件不同的触发顺序和处理结果就形成事件流.', 1, 32, NULL);
INSERT INTO `content` VALUES (121, '一、白盒测试', 1, 33, NULL);
INSERT INTO `content` VALUES (122, '根据软件产品的内部工作过程，在计算机上进行测试，以证实每种内部操作是否符合设计规格要求，所有内部成分是否已经过检查。这种测试方法就是白盒测试。', 1, 33, NULL);
INSERT INTO `content` VALUES (123, '白盒测试把测试对象看做一个打开的盒子，允许测试人员利用程序内部的逻辑结构及有关信息，设计或选择测试用例，对程序所有逻辑路径进行测试。', 1, 33, NULL);
INSERT INTO `content` VALUES (124, '通过在不同点检查程序的状态，确定实际的状态是否与预期的状态一致。', 1, 33, NULL);
INSERT INTO `content` VALUES (125, '二、逻辑覆盖', 1, 33, NULL);
INSERT INTO `content` VALUES (126, '逻辑覆盖是以程序内部的逻辑结构为基础的设计测试用例的技术。属白盒测试。这一方法要求测试人员对程序的逻辑结构有清楚的了解，甚至要能掌握源程序的所有细节。', 1, 33, NULL);
INSERT INTO `content` VALUES (127, '由于覆盖测试的目标不同，逻辑覆盖又可分为：语句覆盖、判定覆盖、判定－条件覆盖、条件组合覆盖及路径覆盖。', 1, 33, NULL);
INSERT INTO `content` VALUES (128, '1.语句覆盖', 1, 33, NULL);
INSERT INTO `content` VALUES (129, '语句覆盖就是设计若干个测试用例，运行被测程序，使得每一可执行语句至少执行一次。', 1, 33, NULL);
INSERT INTO `content` VALUES (130, '这种覆盖又称为点覆盖，它使得程序中每个可执行语句都得到执行，但它是最弱的逻辑覆盖准，效果有限，必须与其他方法交互使用。', 1, 33, NULL);
INSERT INTO `content` VALUES (131, '2.判定覆盖', 1, 33, NULL);
INSERT INTO `content` VALUES (132, '判定覆盖就是设计若干个测试用例，运行被测程序，使得程序中每个判断的取真分支和取假分支至少经历一次。判定覆盖又称为分支覆盖', 1, 33, NULL);
INSERT INTO `content` VALUES (133, '判定覆盖只比语句覆盖稍强一些，但实际效果表明，只是判定覆盖，还不能保证一定能查出在判断的条件中存在的错误。因此，还需要更强的逻辑覆盖准则去检验判断内部条件。', 1, 33, NULL);
INSERT INTO `content` VALUES (134, '3.条件覆盖', 1, 33, NULL);
INSERT INTO `content` VALUES (135, '条件覆盖就是设计若干个测试用例，运行被测程序，使得程序中每个判断的每个条件的可能取值至少执行一次', 1, 33, NULL);
INSERT INTO `content` VALUES (136, '条件覆盖深入到判定中的每个条件，但可能不能满足判定覆盖的要求。', 1, 33, NULL);
INSERT INTO `content` VALUES (137, '4.判定－条件覆盖', 1, 33, NULL);
INSERT INTO `content` VALUES (138, '判定－条件覆盖就是设计足够的测试用例，使得判断中每个条件的所有可能取值至少执行一次，同时每个判断本身的所有可能判断结果至少执行一次。', 1, 33, NULL);
INSERT INTO `content` VALUES (139, '换言之，即是要求各个判断的所有可能的条件取值组合至少执行一次。', 1, 33, NULL);
INSERT INTO `content` VALUES (140, '5.多重条件覆盖', 1, 33, NULL);
INSERT INTO `content` VALUES (141, '多重条件覆盖就是设计足够的测试用例，运行被测程序，使得每个判断的所有可能的条件取值组合至少执行一次。', 1, 33, NULL);
INSERT INTO `content` VALUES (142, '这是一种相当强的覆盖准则，可以有效地检查各种可能的条件取值的组合是否正确。', 1, 33, NULL);
INSERT INTO `content` VALUES (143, '它不但可覆盖所有条件的可能取值的组合，还可覆盖所有判断的可取分支，但可能有的路径会遗漏掉。测试还不完全。', 1, 33, NULL);
INSERT INTO `content` VALUES (144, '6.路径测试', 1, 33, NULL);
INSERT INTO `content` VALUES (145, '路径测试就是设计足够的测试用例，覆盖程序中所有可能的路径。这是最强的覆盖准则。但在路径数目很大时，真正做到完全覆盖是很困难的，必须把覆盖路径数目压缩到一定限度。', 1, 33, NULL);
INSERT INTO `content` VALUES (146, '性能测试是通过自动化的测试工具模拟多种正常、峰值以及异常负载条件来对系统的各项性能指标进行测试', 1, 34, NULL);
INSERT INTO `content` VALUES (147, '负载测试和压力测试都属于性能测试，两者可以结合进行。', 1, 34, NULL);
INSERT INTO `content` VALUES (148, '通过负载测试，确定在各种工作负载下系统的性能，目标是测试当负载逐渐增加时，系统各项性能指标的变化情况。', 1, 34, NULL);
INSERT INTO `content` VALUES (149, '压力测试是通过确定一个系统的瓶颈或者不能接受的性能点，来获得系统能提供的最大服务级别的测试。', 1, 34, NULL);
INSERT INTO `content` VALUES (150, '通用步骤如下', 1, 34, NULL);
INSERT INTO `content` VALUES (151, '1． 制定目标和分析系统', 1, 34, NULL);
INSERT INTO `content` VALUES (152, '2． 选择测试度量的方法', 1, 34, NULL);
INSERT INTO `content` VALUES (153, '3． 学习的相关技术和工具', 1, 34, NULL);
INSERT INTO `content` VALUES (154, '4． 制定评估标准', 1, 34, NULL);
INSERT INTO `content` VALUES (155, '5． 设计测试用例', 1, 34, NULL);
INSERT INTO `content` VALUES (156, '6． 运行测试用例', 1, 34, NULL);
INSERT INTO `content` VALUES (157, '7． 分析测试结果', 1, 34, NULL);
INSERT INTO `content` VALUES (158, '安全测试是在IT软件产品的生命周期中，特别是产品开发基本完成到发布阶段，对产品进行检验以验证产品符合安全需求定义和产品质量标准的过程 。', 1, 35, NULL);
INSERT INTO `content` VALUES (159, '提升IT产品的安全质量；', 1, 35, NULL);
INSERT INTO `content` VALUES (160, '尽量在发布前找到安全问题予以修补降低成本', 1, 35, NULL);
INSERT INTO `content` VALUES (161, '度量安全。', 1, 35, NULL);
INSERT INTO `content` VALUES (162, '验证安装在系统内的保护机制能否在实际应用中对系统进行保护，使之不被非法入侵，不受各种因素的干扰', 1, 35, NULL);
INSERT INTO `content` VALUES (163, '方法有：模式匹配方法、状态机模型、白盒模型、黑盒模型', 1, 35, NULL);
INSERT INTO `content` VALUES (164, '与通常测试区别', 1, 35, NULL);
INSERT INTO `content` VALUES (165, '1.目标不同：测试以发现BUG为目标，安全测试以发现安全隐患为目标。', 1, 35, NULL);
INSERT INTO `content` VALUES (167, '2.假设条件不同：测试假设导致问题的数据是用户不小心造成的，接口一般只考虑用户界面。', 1, 35, NULL);
INSERT INTO `content` VALUES (168, '软件测试定义是：为了发现程序中的错误而执行程序的过程', 1, 36, NULL);
INSERT INTO `content` VALUES (169, '它是帮助识别开发完成（中间或最终的版本）的计算机软件（整体或部分）的正确度、完全度和质量的软件过程', 1, 36, NULL);
INSERT INTO `content` VALUES (170, '软件测试的目标：', 1, 36, NULL);
INSERT INTO `content` VALUES (171, '(1)测试是为了发现程序中的错误而执行程序的过程；', 1, 36, NULL);
INSERT INTO `content` VALUES (172, '(2)好的测试方案是极可能发现迄今为止尚未发现的错误的测试方案；', 1, 36, NULL);
INSERT INTO `content` VALUES (173, '(3)成功的测试是发现了至今为止尚未发现的错误的测试。', 1, 36, NULL);
INSERT INTO `content` VALUES (174, '下面哪个不是软件测试的目标', 2, 36, NULL);
INSERT INTO `content` VALUES (175, '软件测试的内容：', 1, 36, NULL);
INSERT INTO `content` VALUES (176, '软件测试主要工作内容是验证和确认，下面分别给出其概念：', 1, 36, NULL);
INSERT INTO `content` VALUES (177, '验证是保证软件正确地实现了一些特定功能的一系列活动，即保证软件做了你所期望的事情。', 1, 36, NULL);
INSERT INTO `content` VALUES (178, '1.确定软件生存周期中的一个给定阶段的产品是否达到前阶段确立的需求的过程；', 1, 36, NULL);
INSERT INTO `content` VALUES (179, '2.程序正确性的形式证明，即采用形式理论证明程序符号设一计规约规定的过程；', 1, 36, NULL);
INSERT INTO `content` VALUES (180, '3.评审、审查、测试、检查、审计等各类活动，或对某些项处理、服务或文件等是否和规定的需求相一致进行判断和提出报告。', 1, 36, NULL);
INSERT INTO `content` VALUES (181, '以下哪个不是软件测试的工作内容', 2, 36, NULL);
INSERT INTO `content` VALUES (182, '确认是一系列的活动和过程，目的是想证实在一个给定的外部环境中软件的逻辑正确性。即保证软件以正确的方式来做了这个事件', 1, 36, NULL);
INSERT INTO `content` VALUES (183, '1.静态确认，不在计算机上实际执行程序，通过人工或程序分析来证明软件的正确性；', 1, 36, NULL);
INSERT INTO `content` VALUES (184, '2.动态确认，通过执行程序做分析，测试程序的动态行为，以证实软件是否存在问题。', 1, 36, NULL);
INSERT INTO `content` VALUES (185, '软件测试的对象不仅仅是程序测试，软件测试应该包括整个软件开发期间各个阶段所产生的文档', 1, 36, NULL);
INSERT INTO `content` VALUES (186, '下面哪个关于软件测试的说法错误', 2, 36, NULL);
INSERT INTO `content` VALUES (187, '需求工程是指应用已证实有效的原理、方法，通过合适的工具和记号，系统地描述待开发系统及其行为特征和相关约束。', 1, 37, NULL);
INSERT INTO `content` VALUES (188, '需求工程覆盖了体系结构设计之前的各项开发活动，主要包括分析客户要求、对未来系统的各项功能性及非功能性需求进行规格说明', 1, 37, NULL);
INSERT INTO `content` VALUES (189, '针对不同的对象可分为系统需求工程（如果是针对由软硬件共同组成的整个系统）和软件需求工程（如果仅是专门针对纯软件部分）。', 1, 37, NULL);
INSERT INTO `content` VALUES (190, '需求工程的主要目的不包括哪一项', 2, 37, NULL);
INSERT INTO `content` VALUES (191, '在系统开发中，需求工程往往与体系结构设计交替进行，直到分解的子问题可以单纯地由软件或硬件系统解决。', 1, 37, NULL);
INSERT INTO `content` VALUES (192, '软件需求工程则是对应用于纯软件系统开发生命期中系统设计之前的第一阶段。因此，需求工程的目标相当简单明了：确定客户需求，定义设想中系统的所有外部特征', 1, 37, NULL);
INSERT INTO `content` VALUES (193, '需求工程的主要方法有结构化需求抽取方法、系统化的需求建模方法、形式化的需求验证技术。', 1, 37, NULL);
INSERT INTO `content` VALUES (194, '需求分析的主要目的是保证需求的', 2, 37, NULL);
INSERT INTO `content` VALUES (195, '可以把需求工程的活动划分为以下5个独立的阶段：', 1, 37, NULL);
INSERT INTO `content` VALUES (196, '需求获取：通过与用户的交流，对现有系统的观察及对任务进行分析，从而开发、捕获和修订用户的需求；', 1, 37, NULL);
INSERT INTO `content` VALUES (197, '需求建模：为最终用户所看到的系统建立一个概念模型，作为对需求的抽象描述，并尽可能多的捕获现实世界的语义；', 1, 37, NULL);
INSERT INTO `content` VALUES (198, '形成需求规格：生成需求模型构件的精确的形式化的描述，作为用户和开发者之间的一个协约；', 1, 37, NULL);
INSERT INTO `content` VALUES (199, '需求验证：以需求规格说明为输入，通过符号执行、模拟或快速原型等途径，分析需求规格的正确性和可行性，包含有效性检查，一致性检查，可行性检查和确认可验证性；', 1, 37, NULL);
INSERT INTO `content` VALUES (200, '需求管理：支持系统的需求演进，如需求变化和可跟踪性问题。', 1, 37, NULL);
INSERT INTO `content` VALUES (201, '以下哪个不是需求工程的独立阶段', 2, 37, NULL);
INSERT INTO `content` VALUES (202, '测试建模的基本点', 1, 38, NULL);
INSERT INTO `content` VALUES (204, '合理的测试模型可以准确地描述产品，使测试更有针对性，且避免了测试遗漏和浪费。', 1, 38, NULL);
INSERT INTO `content` VALUES (205, '多角度考察产品，重要的切入点包括业务领域、软件实现和项目环境。', 1, 38, NULL);
INSERT INTO `content` VALUES (206, '业务领域：恰当的模型应该切合产品的业务领域；', 1, 38, NULL);
INSERT INTO `content` VALUES (207, '软件实现：好的测试模型具有很强的针对性，能够清晰地描绘被测产品的特征；', 1, 38, NULL);
INSERT INTO `content` VALUES (208, '项目环境：好的测试模型不一定复杂，但一定实用，能够切合当前项目环境，充分利用资源。', 1, 38, NULL);
INSERT INTO `content` VALUES (209, '有关需求建模，以下说法错误的是', 2, 38, NULL);
INSERT INTO `content` VALUES (210, '一方面，测试建模是一个持续的过程；另一方面，测试模型应该在测试小组中分享。', 1, 38, NULL);
INSERT INTO `content` VALUES (211, '模型的表达方式分为形式化模型和非形式化模型两种。', 1, 38, NULL);
INSERT INTO `content` VALUES (212, '形式化模型可以被工具软件读取；非形式化模型包括自然语言表达的文字、列表、草图等。', 1, 38, NULL);
INSERT INTO `content` VALUES (213, '模型的价值取决于发现缺陷的效率。', 1, 38, NULL);
INSERT INTO `content` VALUES (214, '可行的策略是构建一个简单的模型，用它指导测试设计，并根据测试反馈来改进它。在测试迭代中，模型会逐步成长，日趋成熟。', 1, 38, NULL);
INSERT INTO `content` VALUES (215, '以下有关模型说法错误的是', 2, 38, NULL);
INSERT INTO `content` VALUES (216, '不论测试人员是否有意识的建模，任务测试都基于模型，然而，认真去构建好的模型将提高测试过程的质量。', 1, 38, NULL);
INSERT INTO `content` VALUES (217, '测试建模的基本任务是建立被测对象的模型，以帮助理解软件和设计测试。', 1, 38, NULL);
INSERT INTO `content` VALUES (218, '纯粹的通用模型远离业务领域和设计实现，需要做因地制宜的改良，才能发挥作用。改良的基本方法是使用业务需求、产品元素、项目环境的信息去丰富和调整模型。', 1, 38, NULL);
INSERT INTO `content` VALUES (219, '构建模型需要简化和聚焦，使用模型需要扩展和发散。', 1, 38, NULL);
INSERT INTO `content` VALUES (220, '好的测试模型必须经过测试迭代的淬炼。', 1, 38, NULL);
INSERT INTO `content` VALUES (221, '本质上，所有的模型都是错的，但是有些是有用的。', 1, 38, NULL);
INSERT INTO `content` VALUES (222, '不要追求完美的模型，要创建注重实效的模型。模型是测试设计的工具，好的模型将有力支持测试设计。', 1, 38, NULL);
INSERT INTO `content` VALUES (223, '不要依赖单一的模型，要综合多个模型，以避免认知偏差，不要完全信赖任何模型，要通过测试去质疑并改进模型。', 1, 38, NULL);
INSERT INTO `content` VALUES (224, '启发式测试策略模型是一个指导测试设计和风险分析的概念框架，测试人员需要根据项目语境对其进行裁剪和丰富。', 1, 38, NULL);
INSERT INTO `content` VALUES (225, '在测试中，功能列表、输入与输出模型、系统生态图、实体关系模型、状态机模型、质量特性列表等是常见的测试模型。', 1, 38, NULL);
INSERT INTO `content` VALUES (226, '测试人员可以针对特定领域或测试对象开发出多种多样的模型。', 1, 38, NULL);
INSERT INTO `content` VALUES (227, '条件分析是一种启发测思路的常见方法。', 1, 38, NULL);
INSERT INTO `content` VALUES (228, '以下有关测试建模错误的是', 2, 38, NULL);
INSERT INTO `content` VALUES (229, '测试需求分析阶段：阅读需求，理解需求，主要就是对业务的学习，分析需求点，参与需求评审会议', 1, 40, NULL);
INSERT INTO `content` VALUES (230, '测试计划阶段：主要任务就是编写测试计划，参考软件需求规格说明书，项目总体计划，内容包括测试范围，进度安排，人力物力的分配，整体测试策略的制定。', 1, 40, NULL);
INSERT INTO `content` VALUES (231, '测试设计阶段：主要是编写测试用例，会参考需求文档（原型图），概要设计，详细设计等文档，用例编写完成之后会进行评审。', 1, 40, NULL);
INSERT INTO `content` VALUES (232, '测试执行阶段：搭建环境，执行冒烟测试（预测试）-然后进入正式测试，bug管理直到测试结束', 1, 40, NULL);
INSERT INTO `content` VALUES (233, '测试评估阶段：出测试报告，确认是否可以上线', 1, 40, NULL);
INSERT INTO `content` VALUES (234, '以下选项中包含开发和测试的部分流程，顺序正确的选项是', 2, 40, NULL);
INSERT INTO `content` VALUES (235, '测试计划与估算', 1, 41, NULL);
INSERT INTO `content` VALUES (236, '对整个系统或部分系统可能的测试计划活动包括：', 1, 41, NULL);
INSERT INTO `content` VALUES (237, '确定测试的范围和风险，明确测试的目标；', 1, 41, NULL);
INSERT INTO `content` VALUES (238, '定义测试的整体方法（测试策略），包括测试级别（按测试阶段或层次）的定义、入口和出口准则的定义；', 1, 41, NULL);
INSERT INTO `content` VALUES (239, '把测试活动整合和协调到整个软件生命周期活动中去（采购、供应、开发和运维）；', 1, 41, NULL);
INSERT INTO `content` VALUES (240, '决定测试什么？测试由什么角色来执行？如何进行测试？如何评估测试结果？', 1, 41, NULL);
INSERT INTO `content` VALUES (241, '为测试分析和设计活动安排时间进度；', 1, 41, NULL);
INSERT INTO `content` VALUES (242, '为测试实现、执行和评估安排时间进度；', 1, 41, NULL);
INSERT INTO `content` VALUES (243, '为已定义的不同测试活动分配资源；', 1, 41, NULL);
INSERT INTO `content` VALUES (244, '定义测试文档的数量、详细程度、结构和模板；', 1, 41, NULL);
INSERT INTO `content` VALUES (245, '确定测试规程的详细程度，以提供足够的信息支持可复用的测试准备和执行。', 1, 41, NULL);
INSERT INTO `content` VALUES (246, '为监控测试准备和执行、缺陷解决和风险问题选择度量项；', 1, 41, NULL);
INSERT INTO `content` VALUES (247, '有关整个系统或部分系统可能的测试计划活动不包括', 2, 41, NULL);
INSERT INTO `content` VALUES (248, '估算测试工作量的方法：', 1, 41, NULL);
INSERT INTO `content` VALUES (249, '基于度量的方法：根据以前或相似项目的度量值来进行测试工作量的估算，或者根据典型的数据来进行估算；', 1, 41, NULL);
INSERT INTO `content` VALUES (250, '基于专家的方法：由任务的责任人或专家来进行测试任务工作量的估算。', 1, 41, NULL);
INSERT INTO `content` VALUES (251, '一旦估算了测试工作量，就可以识别资源和制定时间进度表。 测试的工作量可能取决于多种因素，包括：', 1, 41, NULL);
INSERT INTO `content` VALUES (252, '产品的特点：规格说明和用于测试模型的其它信息（即测试依据）的质量，产品的规模，问题域的复杂度，可靠性、安全性的需求和文档的需求；', 1, 41, NULL);
INSERT INTO `content` VALUES (253, '开发过程的特点：组织的稳定性、使用的工具、测试过程、参与者的技能水平和时间紧迫程度等；', 1, 41, NULL);
INSERT INTO `content` VALUES (254, '测试的输出：缺陷的数量和需要返工的工作量。', 1, 41, NULL);
INSERT INTO `content` VALUES (255, '以下有关测试度量错误的是', 2, 41, NULL);
INSERT INTO `content` VALUES (256, '黑盒测试用例设计方法,主要包括等价类划分法、边界值分析法、错误推测法、因果图法、判定表驱动发、正交试验设计法、功能图法等', 1, 42, NULL);
INSERT INTO `content` VALUES (257, '1.等价类划分法', 1, 42, NULL);
INSERT INTO `content` VALUES (258, '等价类划分法是把程序的输入域分成若干部分，然后从每个部分中选取少数代表性数据作为测试用例。每一类的代表性数据在测试中的作用等价于这一类中的其他值。', 1, 42, NULL);
INSERT INTO `content` VALUES (259, '2.边界值分析法', 1, 42, NULL);
INSERT INTO `content` VALUES (260, '边界值分析法就是对输入火输出的边界值进行测试的一种黑盒测试方法.同城边界值分析法是作为对等价类划分法的补充.', 1, 42, NULL);
INSERT INTO `content` VALUES (261, '使用边界值分析方法设计测试用例,首先应确定边界情况.通常输入和输出等价类的边界,就是应着重测试的边界情况', 1, 42, NULL);
INSERT INTO `content` VALUES (262, '3.错误推断法', 1, 42, NULL);
INSERT INTO `content` VALUES (263, '基于经验和直觉推测程序中所有可能存在的各种错误,从而有针对性的设计测试用例的方法.', 1, 42, NULL);
INSERT INTO `content` VALUES (264, '4.因果图法', 1, 42, NULL);
INSERT INTO `content` VALUES (265, '因果图法是一种利用图解法分析输入的各种组合情况,从而设计测试用例的方法.', 1, 42, NULL);
INSERT INTO `content` VALUES (266, '5.正交试验法', 1, 42, NULL);
INSERT INTO `content` VALUES (267, '依据Galois理论,从大量的(实验)数据(测试例)中挑选适量的,有代表性的点(例),从而合理地安排实验(测试)的一种科学实验设计方法.', 1, 42, NULL);
INSERT INTO `content` VALUES (268, '以下有关黑盒测试用例设计方法的说法，错误的是', 2, 42, NULL);
INSERT INTO `content` VALUES (269, '6.功能图法', 1, 42, NULL);
INSERT INTO `content` VALUES (270, '功能图由状态迁移图和布尔函数组成.状态迁移图用状态和迁移来描述.一个状态指出数据输入的位置(或时间),', 1, 42, NULL);
INSERT INTO `content` VALUES (271, '而迁移则指明状态的改变.同时要依靠判定表或因果图表示的逻辑功能.', 1, 42, NULL);
INSERT INTO `content` VALUES (272, '7.场景法', 1, 42, NULL);
INSERT INTO `content` VALUES (273, '事件触发时的情景便形成了场景,二同一事件不同的触发顺序和处理结果就形成事件流.', 1, 42, NULL);
INSERT INTO `content` VALUES (274, '以下有关黑盒测试用例设计方法的说法，错误的是', 2, 42, NULL);
INSERT INTO `content` VALUES (275, '一、白盒测试', 1, 43, NULL);
INSERT INTO `content` VALUES (276, '根据软件产品的内部工作过程，在计算机上进行测试，以证实每种内部操作是否符合设计规格要求，所有内部成分是否已经过检查。这种测试方法就是白盒测试', 1, 43, NULL);
INSERT INTO `content` VALUES (277, '白盒测试把测试对象看做一个打开的盒子，允许测试人员利用程序内部的逻辑结构及有关信息，设计或选择测试用例，对程序所有逻辑路径进行测试。', 1, 43, NULL);
INSERT INTO `content` VALUES (278, '通过在不同点检查程序的状态，确定实际的状态是否与预期的状态一致。', 1, 43, NULL);
INSERT INTO `content` VALUES (279, '以下关于白盒测试方法的叙述中，错误的是______。', 2, 43, NULL);
INSERT INTO `content` VALUES (280, '二、逻辑覆盖', 1, 43, NULL);
INSERT INTO `content` VALUES (281, '逻辑覆盖是以程序内部的逻辑结构为基础的设计测试用例的技术。属白盒测试。这一方法要求测试人员对程序的逻辑结构有清楚的了解，甚至要能掌握源程序的所有细节。', 1, 43, NULL);
INSERT INTO `content` VALUES (282, '由于覆盖测试的目标不同，逻辑覆盖又可分为：语句覆盖、判定覆盖、判定－条件覆盖、条件组合覆盖及路径覆盖。', 1, 43, NULL);
INSERT INTO `content` VALUES (283, '在软件测试方法中，黑盒测试法和白盒测试法是常用的方法，其中黑盒测试法主要是用于测试( )。', 2, 43, NULL);
INSERT INTO `content` VALUES (284, '1.语句覆盖', 1, 43, NULL);
INSERT INTO `content` VALUES (285, '语句覆盖就是设计若干个测试用例，运行被测程序，使得每一可执行语句至少执行一次。', 1, 43, NULL);
INSERT INTO `content` VALUES (286, '这种覆盖又称为点覆盖，它使得程序中每个可执行语句都得到执行，但它是最弱的逻辑覆盖准，效果有限，必须与其他方法交互使用。', 1, 43, NULL);
INSERT INTO `content` VALUES (287, '2.判定覆盖', 1, 43, NULL);
INSERT INTO `content` VALUES (288, '判定覆盖就是设计若干个测试用例，运行被测程序，使得程序中每个判断的取真分支和取假分支至少经历一次。判定覆盖又称为分支覆盖。', 1, 43, NULL);
INSERT INTO `content` VALUES (289, '判定覆盖就是设计若干个测试用例，运行被测程序，使得程序中每个判断的取真分支和取假分支至少经历一次。判定覆盖又称为分支覆盖。', 1, 43, NULL);
INSERT INTO `content` VALUES (290, '3.条件覆盖', 1, 43, NULL);
INSERT INTO `content` VALUES (291, '条件覆盖就是设计若干个测试用例，运行被测程序，使得程序中每个判断的每个条件的可能取值至少执行一次。', 1, 43, NULL);
INSERT INTO `content` VALUES (292, '条件覆盖深入到判定中的每个条件，但可能不能满足判定覆盖的要求。', 1, 43, NULL);
INSERT INTO `content` VALUES (293, '4.判定－条件覆盖', 1, 43, NULL);
INSERT INTO `content` VALUES (294, '判定－条件覆盖就是设计足够的测试用例，使得判断中每个条件的所有可能取值至少执行一次，同时每个判断本身的所有可能判断结果至少执行一次。', 1, 43, NULL);
INSERT INTO `content` VALUES (295, '5.多重条件覆盖', 1, 43, NULL);
INSERT INTO `content` VALUES (296, '多重条件覆盖就是设计足够的测试用例，运行被测程序，使得每个判断的所有可能的条件取值组合至少执行一次。', 1, 43, NULL);
INSERT INTO `content` VALUES (297, '这是一种相当强的覆盖准则，可以有效地检查各种可能的条件取值的组合是否正确。', 1, 43, NULL);
INSERT INTO `content` VALUES (298, '它不但可覆盖所有条件的可能取值的组合，还可覆盖所有判断的可取分支，但可能有的路径会遗漏掉。测试还不完全。', 1, 43, NULL);
INSERT INTO `content` VALUES (299, '6.路径测试', 1, 43, NULL);
INSERT INTO `content` VALUES (300, '路径测试就是设计足够的测试用例，覆盖程序中所有可能的路径。这是最强的覆盖准则。但在路径数目很大时，真正做到完全覆盖是很困难的，必须把覆盖路径数目压缩到一定限度。', 1, 43, NULL);
INSERT INTO `content` VALUES (301, '白盒测试一般用于（）测试', 2, 43, NULL);
INSERT INTO `content` VALUES (302, '今天我们开始第一讲：软件过程概述，我们经常听到那个软件是成功的软件，但我们该如何定义成功的软件项目？', 1, 45, NULL);
INSERT INTO `content` VALUES (303, '首先我们来明确项目管理四要素。项目管理四要素：工作范围、时间、成本和质量。', 1, 45, NULL);
INSERT INTO `content` VALUES (304, '成功的项目管理是：在限定的时间内，利用指定的成本， 交付高质量的工作 （PMP定义）对于软件开发而言，工作范围即开发的功能，时间即进度，成本主要是人力资源成本。', 1, 45, NULL);
INSERT INTO `content` VALUES (305, '成功的软件过程就定义为：在限定的时间内，利用给定的资源， 向客户交付高质量的功能，为客户带来价值。', 1, 45, NULL);
INSERT INTO `content` VALUES (306, '下面同学们来做一个选择题：', 1, 45, NULL);
INSERT INTO `content` VALUES (307, '选项中不属于项目成功的制约因素的是（）', 2, 45, NULL);
INSERT INTO `content` VALUES (308, '接下来留一个思考题：在实际的软件项目开发中项目的成功率只有三成，为什么项目总是不成功？', 1, 45, NULL);
INSERT INTO `content` VALUES (309, '在上一讲中我们介绍了成功的项目是什么，这一讲我们来介绍软件能力成熟度模型CMMI，CMMI可以帮助企业按时地、不超预算地开发出高质量的软件。', 1, 47, NULL);
INSERT INTO `content` VALUES (310, '我将带领大家了解如下的问题：✓为什么会产生CMM/CMMI？✓一个比较完整的CMMI的体系介绍', 1, 47, NULL);
INSERT INTO `content` VALUES (311, '为什么会产生CMM/CMMI？', 1, 47, NULL);
INSERT INTO `content` VALUES (312, '这是在二十世纪80年代早期，对于软件开发的需求已经开始大幅增长， 但是多数软件开发组织并没有规范的过程，导致了大量的项目失败。', 1, 47, NULL);
INSERT INTO `content` VALUES (313, '美国国防部也不例外，它们的多个项目都大幅延期、超出预算。1984年，美国国防部和卡耐基-梅隆大学合作，建立了 卡耐基-梅隆大学软件工程研究所', 1, 47, NULL);
INSERT INTO `content` VALUES (314, '其目标是提供一套评估框架，可用于评估军方项目的提供商的能力成熟度水平。', 1, 47, NULL);
INSERT INTO `content` VALUES (315, '在这里以CMMI 2、3级为例来介绍CMMI的体系', 1, 47, NULL);
INSERT INTO `content` VALUES (316, '一、过程管理： 　　1． OPD：组织级过程定义。 　　2． OPF：组织级过程焦点。 　　3． OT：组织培训管理。', 1, 47, NULL);
INSERT INTO `content` VALUES (318, '二、项目管理：4． PP：项目计划。5． PMC：项目监督与控制。6． SAM：供应商协议管理。7． IPM：集成项目管理。8． RSKM：风险管理。', 1, 47, NULL);
INSERT INTO `content` VALUES (319, '三、工程管理: 9..REQM：需求管理。 10.RD：需求开发。 11.TS：技术解决方案。12.PI：产品集成。 13. VER：验证。 14.VAL：确认', 1, 47, NULL);
INSERT INTO `content` VALUES (320, '四、支持管理：15． CM：配置管理。6． PPQA：过程和产品质量保证。 17． MA：测量与分析。18． DAR：决策分析与解决。', 1, 47, NULL);
INSERT INTO `content` VALUES (321, '我们来做一个关于CMMI的练习题', 1, 47, NULL);
INSERT INTO `content` VALUES (322, 'CMMI的阶段式和连续式分别表示____', 2, 47, NULL);
INSERT INTO `content` VALUES (324, '这一讲我们要谈的是软件开发的演化本质与软件过程，同学们都有过做project的体验，随着时间的增长，我们在其中得到的知识也就越多，软件项目也是如此', 1, 48, NULL);
INSERT INTO `content` VALUES (325, '软件项目的本质就是探索和发现。', 1, 48, NULL);
INSERT INTO `content` VALUES (326, '我们来介绍一种模型——瀑布模型，瀑布模型是按照项目计划-需求设计-架构设计-程序编码-软件测试-运行维护的顺序进行的', 1, 48, NULL);
INSERT INTO `content` VALUES (327, '这种模型的优点在于：1.按工序将问题简化。2. 富有逻辑性、便于理解。3. 便于分工协作。', 1, 48, NULL);
INSERT INTO `content` VALUES (328, '但这种模型的缺点也很明显：模型由不同阶段组成，不同阶段由不同团队负责，造成团队的博弈和对立', 1, 48, NULL);
INSERT INTO `content` VALUES (329, '功能性部门组织导致遇到的问题更加严重，会带来延迟反馈这一我们不想看到的结果', 1, 48, NULL);
INSERT INTO `content` VALUES (330, '糟的是延迟反馈会带来巨大返工成本。 在实际软件过程中我们最好采用端到端的迭代和增量的办法', 1, 48, NULL);
INSERT INTO `content` VALUES (331, '这样可以实现价值的不断交付，可以较早的得到客户的反馈并且可以提早发现问题。', 1, 48, NULL);
INSERT INTO `content` VALUES (332, '瀑布模型的存在问题是（ ）', 2, 48, NULL);
INSERT INTO `content` VALUES (333, '软件开发瀑布模型中的软件定义时期各个阶段依次是( )', 2, 48, NULL);
INSERT INTO `content` VALUES (334, '我们今天讲的是Scrum，我们通过实例介绍敏捷开发方法，Scrum是一种迭代式增量软件开发过程，通常用于敏捷软件开发。', 1, 49, NULL);
INSERT INTO `content` VALUES (335, '开发团队包括了所有开发人员。Scrum中有3种角色，分别是产品负责人（Product Owner）、Scrum Master 和 Scrum 团队', 1, 49, NULL);
INSERT INTO `content` VALUES (336, 'SCRUM的骨架核心是什么？', 2, 49, NULL);
INSERT INTO `content` VALUES (337, '这一讲我们来介绍什么是敏捷和精益，敏捷是用于描述一组方法的统称', 1, 50, NULL);
INSERT INTO `content` VALUES (338, '实践、原则、价值观。实践：用户故事、计划游戏、站立会议、迭代反思、测试驱动开发、结对编程、持续集成。', 1, 50, NULL);
INSERT INTO `content` VALUES (339, '原则：敏捷宣言背后的十二原则、极限编程原则、精益软件开发原则。', 1, 50, NULL);
INSERT INTO `content` VALUES (340, '价值观：敏捷宣言、Scrum价值观、极限编程价值观。', 1, 50, NULL);
INSERT INTO `content` VALUES (341, '敏捷宣言： •	个体和互动高于流程和工具 •	工作的软件高于详尽的文档 •	客户合作高于合同谈判 •	响应变化高于遵循计划', 1, 50, NULL);
INSERT INTO `content` VALUES (342, '精益 —— Lean：从最终用户的视角去审视制造过程，一切不增加客户价值的活动，都被视为浪费。', 1, 50, NULL);
INSERT INTO `content` VALUES (343, '精益制造过程，通过持续的消除浪费，以实现快速交付，高质量以及低成本。 价值—用户视角定义价值。', 1, 50, NULL);
INSERT INTO `content` VALUES (344, '精益和敏捷的区别：', 1, 50, NULL);
INSERT INTO `content` VALUES (345, '精益回答的问题: 通过快速持续的交付价值，获取竞争优势。敏捷回答的问题 通过灵活、快速的响应市场的变化，获取竞争优势', 1, 50, NULL);
INSERT INTO `content` VALUES (346, '1.	精益的本质是什么？', 2, 50, NULL);
INSERT INTO `content` VALUES (347, '这一讲我们来讨论产品愿景。', 1, 51, NULL);
INSERT INTO `content` VALUES (348, '请同学们思考下面的问题：谁是目标客户? 他们为什么买我们的产品? 产品瞄准的是什么样的需求 (Needs)?', 1, 51, NULL);
INSERT INTO `content` VALUES (349, '产品的哪些特征对项目的最终成 败是至关重要的? 产品与现有客户现有的，或者竞争对手的产品相比有哪些优势?', 1, 51, NULL);
INSERT INTO `content` VALUES (350, '介绍一种愿景陈述方法——电梯陈述', 1, 51, NULL);
INSERT INTO `content` VALUES (352, '– For 目标用户  – Who 需求和机会的陈述 – The产品名称 is a 产品类别', 1, 51, NULL);
INSERT INTO `content` VALUES (353, '– That 关键benefits -购买的原因 – Unlike 主要替代品或者竞争对手产品 – Our product 主要区别的陈述', 1, 51, NULL);
INSERT INTO `content` VALUES (354, '敏捷需求管理VS 传统需求管理', 1, 53, NULL);
INSERT INTO `content` VALUES (355, '敏捷需求管理：意识到无论花费多大努力也无法创建完美的需求文档', 1, 53, NULL);
INSERT INTO `content` VALUES (356, '总的目标是：以一种可持续的节奏尽可能多地交付价值。', 1, 53, NULL);
INSERT INTO `content` VALUES (358, '传统需求管理：假定：客户能够明确地知道，并清晰地表达系统最终应该是什么样子', 1, 53, NULL);
INSERT INTO `content` VALUES (359, '假定：需求一旦被捕捉，就不会变化。 –假定：客户一旦对需求签字，就不会改变', 1, 53, NULL);
INSERT INTO `content` VALUES (360, '下面________不是项目组用预测方法而不用敏捷方法去管理去管理项目的典型原因', 2, 53, NULL);
INSERT INTO `content` VALUES (361, '企业愿景包括（）', 2, 51, NULL);
INSERT INTO `content` VALUES (362, '二维变换 通过将位移量加到一个点的坐标上来生成一个新的坐标位置，可以实现一次平移（translation）。', 1, 2, NULL);
INSERT INTO `content` VALUES (363, '输入的平移向量用来将一个多边形的n个顶点从一个世界坐标系移动到另一个，而OpenGl子程序用来重新生成平移后的多边形。', 1, 2, NULL);
INSERT INTO `content` VALUES (364, '二维旋转 通过指定一个旋转轴（rotation axis）和一个旋转角度（rotation angle），可以进行一次旋转（rotation）变换。', 1, 2, NULL);
INSERT INTO `content` VALUES (365, '类似平移，旋转是一种不变形的刚体变换，对象上的所有点旋转相同角度。', 1, 2, NULL);
INSERT INTO `content` VALUES (366, 'Bresenham画线算法应用采用什么原理加速计算？', 2, 1, NULL);
INSERT INTO `content` VALUES (367, '大师傅士大夫', 1, 54, NULL);
